#Help
dir(var_name) <-- works like Get-Memberh
help(dict) or help(list)

# Imports
  # import functools
  # from shopping.scart import shopping_cart, shopping_cart2 <-- import multiple modules
  # pdb
  
# File i/o    
  # file_in = open('E:\Study\Python\hello.txt', "r")   
  # content = file_in.read()
  # file_read = content.split(",")      < -- convert to a list with each line split up
  # print(file_read)
  # file_in.close()
  
  # file_in = open('E:\Study\Python\hello.txt', "r")   
  # content = file_in.readlines()       <-- read all lines and make a list
  # print(file_read)
  # file_in.close()
  
  
  
  # file_in = open('E:\Study\Python\hello.txt', "r")
  print(file_in.readline())
  my_file.seek(0)         <--move cursor to beginning of line
  print(file_in.read())
  my_file.seek(0)         <--move cursor to beginning of line
  
  
  
  
  # file_in = open('E:\Study\Python\hello.txt', "r")
  print(file_in.read())
  my_file.seek(0)         <--move cursor to beginning of line
  print(file_in.read())
  my_file.seek(0)         <--move cursor to beginning of line
  
# Debug
  # import pdb 
  # pdb.set_trace()
 
# Vars
  # a,b,c = 1,2,3
  
#Printing  
  # print(value,end='\n')  
  # print(f'Hellow, my name is {var})
  
# Four built in data types to store collections of data
  # tuple
  # list
  # dict
  # set

# List
  #cart_list = ['chips','soda','beer','ice']
    # cart_list.insert(0,"USB Cable")
    # cart_list.append("USB Cable")
    # cart_list.pop()                 <-- removes the last item in the list
    # cart_list.pop(0)                <-- removes the first item in the list
    # cart_list.remove("USB Cable")
    # cart_list.count('beer') <-- counts how many times var shows
    # max_val = max(var/list/tuple) <-- get the largest value
    
# dict
    # fam_dict = {
        'oldes':'Robert',
        'middle':'Dave',
        'young':'Dan'
      }
    # print(fam_dict.get('oldest'))  <-- access value
    # def my_function(*args, **kwargs): 
          for i in kwargs.values():  <--get values in while looping
           print(i)
# Tuple
  
    fam_tup = ('Robert','David',"Dan','Mom','Dad')

# Set
    
    code examples here
    
    
# if statment
  # if value in var:
  # if value not in var:
  # if "Robert" in my_list:
  # if "Robert" not in my_list:
  
# for statement
  # for i in my_list:
  # for num in range(20):
 
# while statment

  # while true:
     try:
        code here
     except:
        code here
     else:
           break
  
#Functions

#******************* The map function runs each value of the list through the function. 
 #  my_list =  ["Robert","Dave","Dan","Mom","Dad","Dad"]+ 1
 #  def change_value(var):
 #      return var
 #
 #  mp = map(change_value, my_list)
 #  new_list = list(mp)
 #  print(new_list[0])

#******************** The filter function runs each value of the list through function and returns TRUE and the value
ages = [5, 12, 17, 18, 24, 32]

def myFunc(x):
  if x < 18:
    return False
  else:
    return True

adults = filter(myFunc, ages)

for x in adults:
  print(x)
#******************** The Zip Function zips two "list" together and makes a tuple
a = ("John", "Charles", "Mike")
b = ("Jenny", "Christy", "Monica")

x = zip(a, b)

#use the tuple() function to display a readable version of the result:

print(tuple(x))

#******************** The Reduce Function 
def accumulator(acc, item):
    print(acc, item)
    return acc + item

print(functools.reduce(accumulator, my_list,0)) <-- accumulater is like a counter, and here we set it to 0
print(my_list)


 # zip
 # reduce
 

  # def fam(fname,lname):
  # def fam("Robert", "Rodriguez"):
  # def fam(fname='Robert',lname='Rodriguez'):
  # def fam(*args):  <-- allows you to pas multiple arguments or keyword arguments to a function
  # def fam(params,*args,default parameters, **kwargs) <-- order for passing into a function
      # def fam(name, *args, i='H', **kwargs)   
  
  def myfunc():
    picture = [
   [0,0,0,1,0,0,0],
   [0,0,1,1,1,0,0],
   [0,1,1,1,1,1,0],
   [1,1,1,1,1,1,1],
   [0,0,0,1,0,0,0],
   [0,0,0,1,0,0,0]
]

    for a in picture:
        print('',end='\n')
        for b in a:
            if b == 0:
               print(" ",end='')
            else:
               print("*",end='')
  
